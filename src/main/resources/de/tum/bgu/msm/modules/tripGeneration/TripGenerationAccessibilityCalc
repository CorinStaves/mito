var calculateHBWProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {


    intercept = -1.53448;
    if(householdSize == 2) {
        householdSizeParam= 0.16157;
    } else if(householdSize == 3) {
        householdSizeParam = 0.14973;
    } else if(householdSize == 4) {
        householdSizeParam = 0.1274;
    } else if(householdSize >4) {
        householdSizeParam = 0.09556;
    } else {
        householdSizeParam = 0;
    }
    femalesParam = 0;
    youngAdultsParam = -0.03896;
    retireesParam = -0.79581;
    workersParam = 0.60765;
    if (restrictedMobility == 1){
        restrictedMobilityParam = -0.22213;
    } else {
        restrictedMobilityParam = 0;
    }
    carsParam = 0;
    accessibilityImpact = 0;
    distanceToTransitParam = 0;
    if(economicStatus == 2) {
        economicStatusParam = 0;
    } else if(economicStatus == 3) {
        economicStatusParam = 0.11901;
    } else if(economicStatus == 4) {
        economicStatusParam = 0.13655;
    } else if(economicStatus == 5) {
        economicStatusParam = 0.09238;
    } else {
        economicStatusParam = 0;
    }

    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;


    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;

}

var calculateHBEProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {

    intercept = -3.89258;
    if(householdSize == 2) {
        householdSizeParam= 1.25524;
    } else if(householdSize == 3) {
        householdSizeParam = 3.27270;
    } else if(householdSize == 4) {
        householdSizeParam = 4.07921;
    } else if(householdSize >4) {
        householdSizeParam = 4.58999;
    } else {
        householdSizeParam = 0;
    }
    femalesParam = 0.07319;
    youngAdultsParam = -0.10537;
    retireesParam = -1.23107;
    workersParam = -0.16393;
    if (restrictedMobility == 1){
        restrictedMobilityParam = -0.19332;
    } else {
        restrictedMobilityParam = 0;
    }
    carsParam = -0.13502;
    accessibilityImpact = 0;
    distanceToTransitParam = 0;
    economicStatusParam = 0;

    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;


    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;

}

var calculateHBSProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {

    intercept = -1.096371;
    if(householdSize == 2) {
        householdSizeParam= 0.556072;
    } else if(householdSize == 3) {
        householdSizeParam = 0.746848;
    } else if(householdSize == 4) {
        householdSizeParam = 0.860430;
    } else if(householdSize >4) {
        householdSizeParam = 1.070433;
    } else {
        householdSizeParam = 0;
    }
    femalesParam = -0.052590;
    youngAdultsParam = 0.117069;
    retireesParam = 0.113943;
    workersParam = -0.181578;
    restrictedMobilityParam = 0;
    carsParam = 0;
    accessibilityImpact = HBS * 0.025614;
    distanceToTransitParam = 0;
    if(economicStatus == 2) {
        economicStatusParam = 0.176829;
    } else if(economicStatus == 3) {
        economicStatusParam = 0.180018;
    } else if(economicStatus == 4) {
        economicStatusParam = 0.181741;
    } else if(economicStatus == 5) {
        economicStatusParam = 0.181741;
    } else {
        economicStatusParam = 0;
    }

    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;


    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;


}

var calculateHBOProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {

    intercept = -0.031330;
    if(householdSize == 2) {
        householdSizeParam= 0.589075;
    } else if(householdSize == 3) {
        householdSizeParam = 1.069988;
    } else if(householdSize == 4) {
        householdSizeParam = 1.491792;
    } else if(householdSize >4) {
        householdSizeParam = 1.782393;
    } else {
        householdSizeParam = 0;
    }
    femalesParam = 0.029459;
    youngAdultsParam = -0.067206;
    retireesParam = 0;
    workersParam = -0.217773;
    restrictedMobilityParam = 0;
    carsParam = 0.039063;
    accessibilityImpact = HBO * (-0.023586);
    distanceToTransitParam =0;
    if(economicStatus == 2) {
        economicStatusParam = 0.052719;
    } else if(economicStatus == 3) {
        economicStatusParam = 0.060744;
    } else if(economicStatus == 4) {
        economicStatusParam = 0.125896;
    } else if(economicStatus == 5) {
        economicStatusParam = 0.150952;
    } else {
        economicStatusParam = 0;
    }


    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;


    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;

}

var calculateNHBWProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {

    intercept = -2.77502;
    householdSizeParam = 0;
    femalesParam = 0.05300;
    youngAdultsParam = -0.12748;
    retireesParam = -1.07755;
    workersParam = 0.51615;
    if (restrictedMobility == 1){
        restrictedMobilityParam = -0.25245;
    } else {
        restrictedMobilityParam = 0;
    }
    carsParam = -0.04546;
    accessibilityImpact = NHBW * 0.04886;
    distanceToTransitParam = 0;
    if(economicStatus == 2) {
        economicStatusParam = 0.24242;
    } else if(economicStatus == 3) {
        economicStatusParam = 0.53702;
    } else if(economicStatus == 4) {
        economicStatusParam = 0.81606;
    } else if(economicStatus == 5) {
        economicStatusParam = 0.99519;
    } else {
        economicStatusParam = 0;
    }

    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;


    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;

}

var calculateNHBOProbabilities = function (purpose, householdSize, females, youngAdults, retirees, workers, restrictedMobility, cars,
HBW, HBS, HBO, NHBW, NHBO, distanceToTransit, economicStatus) {
    intercept = -0.828606;
    if(householdSize == 2) {
        householdSizeParam= 0.561611;
    } else if(householdSize == 3) {
        householdSizeParam = 0.962459;
    } else if(householdSize == 4) {
        householdSizeParam = 1.231589;
    } else if(householdSize >4) {
        householdSizeParam = 1.474904;
    } else {
        householdSizeParam = 0;
    }
    femalesParam = 0.098032;
    youngAdultsParam = 0;
    retireesParam = -0.099031;
    workersParam = -0.282714;
    restrictedMobilityParam = 0;
    carsParam = 0.024947;
    accessibilityImpact = NHBO * 0.030217;
    distanceToTransitParam = -0.009979;
    if(economicStatus == 2) {
        economicStatusParam = 0.202781;
    } else if(economicStatus == 3) {
        economicStatusParam = 0.288732;
    } else if(economicStatus == 4) {
        economicStatusParam = 0.436744;
    } else if(economicStatus == 5) {
        economicStatusParam = 0.532862;
    } else {
        economicStatusParam = 0;
    }

    femalesImpact = females * femalesParam;
    youngAdultsImpact = youngAdults * youngAdultsParam;
    retireesImpact = retirees * retireesParam;
    workersImpact = workers * workersParam;
    carsImpact = cars * carsParam;
    distanceToTransitImpact = distanceToTransit * distanceToTransitParam;

    meanPoisson = intercept + householdSizeParam + femalesImpact + youngAdultsImpact + retireesImpact + workersImpact +
        restrictedMobilityParam + carsImpact + accessibilityImpact + distanceToTransitImpact + economicStatusParam;

    expMeanPoisson = Math.exp(meanPoisson);
    return expMeanPoisson;

}
