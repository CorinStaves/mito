nestingCoefficient = 0.25;

fuelCostEurosPerKm = 0.07;

VOT1500_HBW_HBE_autoD = 4.63 / 60;
VOT5600_HBW_HBE_autoD = 8.94 / 60;
VOT7000_HBW_HBE_autoD = 12.15 / 60;
VOT1500_HBW_HBE_autoP = 7.01 / 60;
VOT5600_HBW_HBE_autoP = 13.56 / 60;
VOT7000_HBW_HBE_autoP = 18.43 / 60;
VOT1500_HBW_HBE_transit = 8.94 / 60;
VOT5600_HBW_HBE_transit = 17.30 / 60;
VOT7000_HBW_HBE_transit = 23.50 / 60;

VOT1500_other_autoD = 3.26 / 60;
VOT5600_other_autoD = 6.30 / 60;
VOT7000_other_autoD = 8.56 / 60;
VOT1500_other_autoP = 4.30 / 60;
VOT5600_other_autoP = 8.31 / 60;
VOT7000_other_autoP = 11.30 / 60;
VOT1500_other_transit = 5.06 / 60;
VOT5600_other_transit = 9.78 / 60;
VOT7000_other_transit = 13.29 / 60;

scenario = 1;

///////////////////////////////////////////////// HBW Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order:[AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptHBW            = [0.0, 0.53, 2.78, 3.12, 3.11, 3.06, 6.30];
ageHBW                  = [0.0, -0.0037, 0.0, -0.016, -0.017, -0.014, 0.0];
maleHBW                 = [0.0, -0.16, 0.22, -0.28, -0.25, -0.18, 0.0];
driversLicenseHBW       = [0.0, -1.03, -1.86, -2.25, -2.09, -2.14, -2.16];
hhSizeHBW               = [0.0, 0.063, 0.25, 0.17, 0.18, 0.15, 0.0];
hhAutosHBW              = [0.0, -0.16, -1.11, -1.27, -1.26, -1.29, -0.73];
distToRailStopHBW       = [0.0, 0.0, 0.0, -0.36, -0.39, -0.40, 0.0];
coreCityHBW             = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
mediumSizedCityHBW      = [0.0, 0.0, -0.29, -0.70, -0.75, -1.05, -0.59];
townHBW                 = [0.0, 0.071, -0.39, -0.86, -0.88, -1.22, -0.89];
ruralHBW                = [0.0, 0.071, -0.39, -0.86, -0.88, -1.22, -0.89];
generalizedCostHBW      = [-0.0088, -0.0088, 0.0, -0.0088, -0.0088, -0.0088, 0.0];
tripLengthHBW           = [0.0, 0.0, -0.32, 0.0, 0.0, 0.0, -2.02];
isMunichTripHBW         = [0.0, 0.04, 0.63, 0.77, 0.76, 0.77, 2.32];

var calculateHBWProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto,
    travelDistanceNMT, peakHour){


    disability = person.getDisability();
    if (scenario == 1){
    //scenario one: travel time for persons with disability
        transitFareEurosPerKm = 0.12;
       if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
     } else if (scenario == 2){
    //scenario two: travel time for persons with disability but cost zero to transit
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            transitFareEurosPerKm = 0.12;
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            transitFareEurosPerKm = 0.0;
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 3){
    //scenario three: same travel time with this paratransit service (as person without disability)
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
             timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
             timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
             timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            travelDistanceNMT = travelDistanceNMT * 1.5;
         }
    } else if (scenario == 4){
    //scenario four: same travel time with this paratransit service (as person without disability) and free
          if (disability.name().equals("WITHOUT")){
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
            transitFareEurosPerKm = 0.12;
          } else {
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    }
    income = hh.getIncome();
    age = person.getAge();
    gender = person.getMitoGender();
    driversLicense = person.hasDriversLicense();
    hhSize = hh.getHhSize();
    hhAutos = hh.getAutos();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    areaType = originZone.getAreaTypeSG();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
        gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_HBW_HBE_autoD
        gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_HBW_HBE_autoP
        gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
        gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
        gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
        gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_HBW_HBE_autoD
        gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_HBW_HBE_autoP
        gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
        gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
        gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
    } else if (income/12 > 5600){
        gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_HBW_HBE_autoD
        gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_HBW_HBE_autoP
        gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
        gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
        gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
    }

    utilityAutoD        = interceptHBW[0] + ageHBW[0]*age + maleHBW[0]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[0]*driversLicense + hhSizeHBW[0]*hhSize + hhAutosHBW[0]*hhAutos +
                          distToRailStopHBW[0]*distToRailStop + coreCityHBW[0]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[0]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[0]*(areaType.name().equals("TOWN")) +
                          ruralHBW[0]*(areaType.name().equals("RURAL")) +
                          generalizedCostHBW[0]*gcAutoD;

    utilityAutoP        = interceptHBW[1] + ageHBW[1]*age + maleHBW[1]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[1]*driversLicense + hhSizeHBW[1]*hhSize + hhAutosHBW[1]*hhAutos +
                          distToRailStopHBW[1]*distToRailStop + coreCityHBW[1]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[1]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[1]*(areaType.name().equals("TOWN")) +
                          ruralHBW[1]*(areaType.name().equals("RURAL")) +
                          generalizedCostHBW[1]*gcAutoP;

    utilityBicycle      = interceptHBW[2] + ageHBW[2]*age + maleHBW[2]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[2]*driversLicense + hhSizeHBW[2]*hhSize + hhAutosHBW[2]*hhAutos +
                          distToRailStopHBW[2]*distToRailStop + coreCityHBW[2]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[2]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[2]*(areaType.name().equals("TOWN")) +
                          ruralHBW[2]*(areaType.name().equals("RURAL")) +
                          tripLengthHBW[2]*travelDistanceNMT;

    utilityBus          = interceptHBW[3] + ageHBW[3]*age + maleHBW[3]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[3]*driversLicense + hhSizeHBW[3]*hhSize + hhAutosHBW[3]*hhAutos +
                          distToRailStopHBW[3]*distToRailStop + coreCityHBW[3]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[3]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[3]*(areaType.name().equals("TOWN")) +
                          ruralHBW[3]*(areaType.name().equals("RURAL")) +
                          generalizedCostHBW[3]*gcBus;

    utilityTrain        = interceptHBW[4] + ageHBW[4]*age + maleHBW[4]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[4]*driversLicense + hhSizeHBW[4]*hhSize + hhAutosHBW[4]*hhAutos +
                          distToRailStopHBW[4]*distToRailStop + coreCityHBW[4]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[4]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[4]*(areaType.name().equals("TOWN")) +
                          ruralHBW[4]*(areaType.name().equals("RURAL")) +
                          generalizedCostHBW[4]*gcTrain;

    utilityTramMetro    = interceptHBW[5] + ageHBW[5]*age + maleHBW[5]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[5]*driversLicense + hhSizeHBW[5]*hhSize + hhAutosHBW[5]*hhAutos +
                          distToRailStopHBW[5]*distToRailStop + coreCityHBW[5]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[5]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[5]*(areaType.name().equals("TOWN")) +
                          ruralHBW[5]*(areaType.name().equals("RURAL")) +
                          generalizedCostHBW[5]*gcTramMetro;

    utilityWalk         = interceptHBW[6] + ageHBW[6]*age + maleHBW[6]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[6]*driversLicense + hhSizeHBW[6]*hhSize + hhAutosHBW[6]*hhAutos +
                          distToRailStopHBW[6]*distToRailStop + coreCityHBW[6]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[6]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[6]*(areaType.name().equals("TOWN")) +
                          ruralHBW[6]*(areaType.name().equals("RURAL")) +
                          tripLengthHBW[6]*travelDistanceNMT;

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
            expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
            expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
            expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

            if(expsumNestAuto > 0) {
                probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
                probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            }
            else {
                probabilityAutoD = 0.0;
                probabilityAutoP = 0.0;
            }
            if(expsumNestTransit > 0) {
                probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            }
            else {
                probabilityBus = 0.0;
                probabilityTrain = 0.0;
                probabilityTramMetro = 0.0;
            }
            probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
            probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;

    return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain,
        probabilityTramMetro, probabilityWalk], "double[]");

}


///////////////////////////////////////////////// HBE Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order - [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptHBE        = [0.0, 1.41, 2.15, 3.00, 2.72, 3.02, 4.23];
maleHBE             = [0.0, -0.17, 0.0, -0.14, -0.15, -0.15, 0.0];
driversLicenseHBE   = [0.0, -1.26, -0.43, -1.23, -0.75, -0.77, -0.55];
hhAutosHBE          = [0.0, -0.11, -0.56, -0.52, -0.56, -0.70, -0.68];
distToRailStopHBE   = [0.0, 0.0, 0.0, -0.28, -0.26, -0.46, 0.0];
generalizedCostHBE  = [-0.0025, -0.0025, 0.0, -0.0025, -0.0025, -0.0025, 0.0];
tripLengthHBE       = [0.0, 0.0, -0.42, 0.0, 0.0, 0.0, -1.71];
isMunichTripHBE         = [0.0, 0.02, 0.25, 0.07, 0.08, 0.06, -0.49];

var calculateHBEProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto, travelDistanceNMT, peakHour){


    disability = person.getDisability();
    if (scenario == 1){
    transitFareEurosPerKm = 0.12;
    //scenario one: travel time for persons with disability
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 2){
    //scenario two: travel time for persons with disability but cost zero to transit
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            transitFareEurosPerKm = 0.12;
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            transitFareEurosPerKm = 0.0;
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 3){
    //scenario three: same travel time with this paratransit service (as person without disability)
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            travelDistanceNMT = travelDistanceNMT * 1.5;
         }
    } else if (scenario == 4){
    //scenario three: same travel time with this paratransit service (as person without disability)
          if (disability.name().equals("WITHOUT")){
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.12;
          } else {
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    }
    income = hh.getIncome();
    gender = person.getMitoGender();
    driversLicense = person.hasDriversLicense();
    hhAutos = hh.getAutos();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_HBW_HBE_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_HBW_HBE_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_HBW_HBE_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_HBW_HBE_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_HBW_HBE_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_HBW_HBE_transit
    } else if (income/12 > 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_HBW_HBE_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_HBW_HBE_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_HBW_HBE_transit
    }

    utilityAutoD        = interceptHBE[0] + maleHBE[0]*(gender.name().equals("MALE")) + driversLicenseHBE[0]*driversLicense +
                          hhAutosHBE[0]*hhAutos + distToRailStopHBE[0]*distToRailStop + generalizedCostHBE[0]*gcAutoD;

    utilityAutoP        = interceptHBE[1] + maleHBE[1]*(gender.name().equals("MALE")) + driversLicenseHBE[1]*driversLicense +
                          hhAutosHBE[1]*hhAutos + distToRailStopHBE[1]*distToRailStop + generalizedCostHBE[1]*gcAutoP;

    utilityBicycle      = interceptHBE[2] + maleHBE[2]*(gender.name().equals("MALE")) + driversLicenseHBE[2]*driversLicense +
                          hhAutosHBE[2]*hhAutos + distToRailStopHBE[2]*distToRailStop + tripLengthHBE[2]*travelDistanceNMT;

    utilityBus          = interceptHBE[3] + maleHBE[3]*(gender.name().equals("MALE")) + driversLicenseHBE[3]*driversLicense +
                          hhAutosHBE[3]*hhAutos + distToRailStopHBE[3]*distToRailStop + generalizedCostHBE[3]*gcBus;

    utilityTrain        = interceptHBE[4] + maleHBE[4]*(gender.name().equals("MALE")) + driversLicenseHBE[4]*driversLicense +
                          hhAutosHBE[4]*hhAutos + distToRailStopHBE[4]*distToRailStop + generalizedCostHBE[4]*gcTrain;

    utilityTramMetro    = interceptHBE[5] + maleHBE[5]*(gender.name().equals("MALE")) + driversLicenseHBE[5]*driversLicense +
                          hhAutosHBE[5]*hhAutos + distToRailStopHBE[5]*distToRailStop + generalizedCostHBE[5]*gcTramMetro;

    utilityWalk         = interceptHBE[6] + maleHBE[6]*(gender.name().equals("MALE")) + driversLicenseHBE[6]*driversLicense +
                          hhAutosHBE[6]*hhAutos + distToRailStopHBE[6]*distToRailStop + tripLengthHBE[6]*travelDistanceNMT;

    logsumAuto = Math.log(Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient));
    logsumTransit = Math.log(Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient));

    probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / ( Math.exp(utilityAutoD/nestingCoefficient)+Math.exp(utilityAutoP/nestingCoefficient))) * (Math.exp(nestingCoefficient*logsumAuto) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit)));
    probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / ( Math.exp(utilityAutoD/nestingCoefficient)+Math.exp(utilityAutoP/nestingCoefficient))) * (Math.exp(nestingCoefficient*logsumAuto) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit)));
    probabilityBicycle = Math.exp(utilityBicycle) / (Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit));
    probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / ( Math.exp(utilityBus/nestingCoefficient)+Math.exp(utilityTrain/nestingCoefficient)+Math.exp(utilityTramMetro/nestingCoefficient))) * ( Math.exp(nestingCoefficient*logsumTransit) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit)));
    probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / ( Math.exp(utilityBus/nestingCoefficient)+Math.exp(utilityTrain/nestingCoefficient)+Math.exp(utilityTramMetro/nestingCoefficient))) * ( Math.exp(nestingCoefficient*logsumTransit) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit)));
    probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / ( Math.exp(utilityBus/nestingCoefficient)+Math.exp(utilityTrain/nestingCoefficient)+Math.exp(utilityTramMetro/nestingCoefficient))) * ( Math.exp(nestingCoefficient*logsumTransit) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit)));
    probabilityWalk = Math.exp(utilityWalk) / ( Math.exp(nestingCoefficient*logsumAuto) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*logsumTransit));

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
            expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
            expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
            expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

            if(expsumNestAuto > 0) {
                probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
                probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            }
            else {
                probabilityAutoD = 0.0;
                probabilityAutoP = 0.0;
            }
            if(expsumNestTransit > 0) {
                probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            }
            else {
                probabilityBus = 0.0;
                probabilityTrain = 0.0;
                probabilityTramMetro = 0.0;
            }
            probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
            probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;

        return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain,
            probabilityTramMetro, probabilityWalk], "double[]");
}


///////////////////////////////////////////////// HBS Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order: [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptHBS            = [0.0, 0.92, 2.50, 1.61, 1.17, 1.67, 6.35];
maleHBS                 = [0.0, -0.47, -0.14, -0.62, -0.47, -0.53, -0.15];
driversLicenseHBS       = [0.0, -1.43, -1.86, -2.43, -2.46, -2.39, -2.10];
hhAutosHBS              = [0.0, -0.03, -0.81, -1.88, -1.73, -1.88, -0.86];
distToRailStopHBS       = [0.0, 0.0, 0.0, -0.87, -0.68, -1.02, 0.0];
hhChildrenHBS           = [0.0, -0.051, 0.0, 0.0, 0.0, 0.0, -0.17];
generalizedCostHBS_Sq   = [-0.0000068, -0.0000068, 0.0, -0.0000068, -0.0000068, -0.0000068, 0.0];
tripLengthHBS           = [0.0, 0.0, -0.42, 0.0, 0.0, 0.0, -1.46];
isMunichTripHBS         = [0.0, 0.05, 1.16, 1.35, 1.32, 1.36, 1.94];

var calculateHBSProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto, travelDistanceNMT, peakHour){

var dataSet = Java.type('de.tum.bgu.msm.data.DataSet');
    hhChildren = dataSet.getChildrenForHousehold(hh);

    disability = person.getDisability();
     if (scenario == 1){
     //scenario one: travel time for persons with disability
        transitFareEurosPerKm = 0.12;
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 2){
    //scenario two: travel time for persons with disability but cost zero to transit
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            transitFareEurosPerKm = 0.12;
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            transitFareEurosPerKm = 0.0;
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 3){
    //scenario three: same travel time with this paratransit service (as person without disability)
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            travelDistanceNMT = travelDistanceNMT * 1.5;
         }
    } else if (scenario == 4){
    //scenario three: same travel time with this paratransit service (as person without disability)

          if (disability.name().equals("WITHOUT")){
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.12;
          } else {
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    }
    income = hh.getIncome();
    gender = person.getMitoGender();
    driversLicense = person.hasDriversLicense();
    hhAutos = hh.getAutos();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    } else if (income/12 > 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    }

    utilityAutoD        = interceptHBS[0] + maleHBS[0]*(gender.name().equals("MALE")) + driversLicenseHBS[0]*driversLicense +
                          hhAutosHBS[0]*hhAutos + distToRailStopHBS[0]*distToRailStop + hhChildrenHBS[0]*hhChildren +
                          generalizedCostHBS_Sq[0]*Math.pow(gcAutoD,2);

    utilityAutoP        = interceptHBS[1] + maleHBS[1]*(gender.name().equals("MALE")) + driversLicenseHBS[1]*driversLicense +
                          hhAutosHBS[1]*hhAutos + distToRailStopHBS[1]*distToRailStop + hhChildrenHBS[1]*hhChildren +
                          generalizedCostHBS_Sq[1]*Math.pow(gcAutoP,2);

    utilityBicycle      = interceptHBS[2] + maleHBS[2]*(gender.name().equals("MALE")) + driversLicenseHBS[2]*driversLicense +
                          hhAutosHBS[2]*hhAutos + distToRailStopHBS[2]*distToRailStop + hhChildrenHBS[2]*hhChildren +
                          tripLengthHBS[2]*travelDistanceNMT;

    utilityBus          = interceptHBS[3] + maleHBS[3]*(gender.name().equals("MALE")) + driversLicenseHBS[3]*driversLicense +
                          hhAutosHBS[3]*hhAutos + distToRailStopHBS[3]*distToRailStop + hhChildrenHBS[3]*hhChildren +
                          generalizedCostHBS_Sq[3]*Math.pow(gcBus,2);

    utilityTrain        = interceptHBS[4] + maleHBS[4]*(gender.name().equals("MALE")) + driversLicenseHBS[4]*driversLicense +
                          hhAutosHBS[4]*hhAutos + distToRailStopHBS[4]*distToRailStop + hhChildrenHBS[4]*hhChildren +
                          generalizedCostHBS_Sq[4]*Math.pow(gcTrain,2);

    utilityTramMetro    = interceptHBS[5] + maleHBS[5]*(gender.name().equals("MALE")) + driversLicenseHBS[5]*driversLicense +
                          hhAutosHBS[5]*hhAutos + distToRailStopHBS[5]*distToRailStop + hhChildrenHBS[5]*hhChildren +
                          generalizedCostHBS_Sq[5]*Math.pow(gcTramMetro,2);

    utilityWalk         = interceptHBS[6] + maleHBS[6]*(gender.name().equals("MALE")) + driversLicenseHBS[6]*driversLicense +
                          hhAutosHBS[6]*hhAutos + distToRailStopHBS[6]*distToRailStop + hhChildrenHBS[6]*hhChildren +
                          tripLengthHBS[6]*travelDistanceNMT;

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
            expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
            expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
            expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

            if(expsumNestAuto > 0) {
                probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
                probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            }
            else {
                probabilityAutoD = 0.0;
                probabilityAutoP = 0.0;
            }
            if(expsumNestTransit > 0) {
                probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            }
            else {
                probabilityBus = 0.0;
                probabilityTrain = 0.0;
                probabilityTramMetro = 0.0;
            }
            probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
            probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;

    return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain, probabilityTramMetro, probabilityWalk], "double[]");

}


///////////////////////////////////////////////// HBO Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order: [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptHBO        = [0.0, 1.04, 1.25, 1.47, 1.22, 1.59, 4.09];
maleHBO             = [0.0, -0.27, 0.17, -0.13, 0.0, -0.063, -0.13];
driversLicenseHBO   = [0.0, -1.34, -1.51, -1.91, -1.66, -1.74, -1.30];
hhAutosHBO          = [0.0, -0.029, -0.57, -1.54, -1.56, -1.72, -0.30];
hhSizeHBO           = [0.0, 0.0, 0.0, -0.11, -0.11, -0.15, -0.19];
distToRailStopHBO   = [0.0, 0.0, 0.0, -0.61, -0.57, -0.58, -0.065];
generalizedCostHBO  = [-0.0012, -0.0012, 0.0, -0.0012, -0.0012, -0.0012, 0.0];
tripLengthHBO       = [0.0, 0.0, -0.15, 0.0, 0.0, 0.0, -0.68];
isMunichTripHBO         = [0.0, 0.14, 0.61, 1.25, 1.23, 1.25, 0.34];

var calculateHBOProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto, travelDistanceNMT, peakHour){

    disability = person.getDisability();
    if (scenario == 1){
    //scenario one: travel time for persons with disability
        transitFareEurosPerKm = 0.12;
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 2){
    //scenario two: travel time for persons with disability but cost zero to transit
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            transitFareEurosPerKm = 0.12;
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            transitFareEurosPerKm = 0.0;
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 3){
    //scenario three: same travel time with this paratransit service (as person without disability)
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            travelDistanceNMT = travelDistanceNMT * 1.5;
         }
    } else if (scenario == 4){
    //scenario four: same travel time with this paratransit service (as person without disability)

          if (disability.name().equals("WITHOUT")){
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.12;
          } else {
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    }
    income = hh.getIncome();
    gender = person.getMitoGender();
    driversLicense = person.hasDriversLicense();
    hhAutos = hh.getAutos();
    hhSize = hh.getHhSize();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    } else if (income/12 > 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    }

    utilityAutoD        = interceptHBO[0] + maleHBO[0]*(gender.name().equals("MALE")) + driversLicenseHBO[0]*driversLicense +
                          hhAutosHBO[0]*hhAutos + hhSizeHBO[0]*hhSize + distToRailStopHBO[0]*distToRailStop +
                          generalizedCostHBO[0]*gcAutoD;

    utilityAutoP        = interceptHBO[1] + maleHBO[1]*(gender.name().equals("MALE")) + driversLicenseHBO[1]*driversLicense +
                          hhAutosHBO[1]*hhAutos + hhSizeHBO[1]*hhSize + distToRailStopHBO[1]*distToRailStop +
                          generalizedCostHBO[1]*gcAutoP;

    utilityBicycle      = interceptHBO[2] + maleHBO[2]*(gender.name().equals("MALE")) + driversLicenseHBO[2]*driversLicense +
                          hhAutosHBO[2]*hhAutos + hhSizeHBO[2]*hhSize + distToRailStopHBO[2]*distToRailStop +
                          tripLengthHBO[2]*travelDistanceNMT;

    utilityBus          = interceptHBO[3] + maleHBO[3]*(gender.name().equals("MALE")) + driversLicenseHBO[3]*driversLicense +
                          hhAutosHBO[3]*hhAutos + hhSizeHBO[3]*hhSize + distToRailStopHBO[3]*distToRailStop +
                          generalizedCostHBO[3]*gcBus;

    utilityTrain        = interceptHBO[4] + maleHBO[4]*(gender.name().equals("MALE")) + driversLicenseHBO[4]*driversLicense +
                          hhAutosHBO[4]*hhAutos + hhSizeHBO[4]*hhSize + distToRailStopHBO[4]*distToRailStop +
                          generalizedCostHBO[4]*gcTrain;

    utilityTramMetro    = interceptHBO[5] + maleHBO[5]*(gender.name().equals("MALE")) + driversLicenseHBO[5]*driversLicense +
                          hhAutosHBO[5]*hhAutos + hhSizeHBO[5]*hhSize + distToRailStopHBO[5]*distToRailStop +
                          generalizedCostHBO[5]*gcTramMetro;

    utilityWalk         = interceptHBO[6] + maleHBO[6]*(gender.name().equals("MALE")) + driversLicenseHBO[6]*driversLicense +
                          hhAutosHBO[6]*hhAutos + hhSizeHBO[6]*hhSize + distToRailStopHBO[6]*distToRailStop +
                          tripLengthHBO[6]*travelDistanceNMT;

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
            expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
            expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
            expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

            if(expsumNestAuto > 0) {
                probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
                probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            }
            else {
                probabilityAutoD = 0.0;
                probabilityAutoP = 0.0;
            }
            if(expsumNestTransit > 0) {
                probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            }
            else {
                probabilityBus = 0.0;
                probabilityTrain = 0.0;
                probabilityTramMetro = 0.0;
            }
            probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
            probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;

    return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain, probabilityTramMetro, probabilityWalk], "double[]");

}


///////////////////////////////////////////////// NHBW Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order: [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptNHBW       = [0.0, 0.58, 1.99, 0.72, 1.11, 1.02, 7.22];
ageNHBW             = [0.0, -0.0045, 0.0, 0.0, -0.0059, 0.0, -0.011];
driversLicenseNHBW  = [0.0, -0.94, -1.56, -1.61, -1.67, -1.37, -1.43];
hhAutosNHBW         = [0.0, -0.11, -1.12, -1.23, -1.44, -1.52, -0.47];
distToRailStopNHBW  = [0.0, 0.0, 0.0, -0.24, 0.0, -0.16, -0.37];
generalizedCostNHBW = [-0.0034, -0.0034, 0.0, -0.0034, -0.0034, -0.0034, 0.0];
tripLengthNHBW      = [0.0, 0.0, -0.28, 0.0, 0.0, 0.0, -1.54];

var calculateNHBWProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto, travelDistanceNMT, peakHour){

    disability = person.getDisability();
     if (scenario == 1){
    ///scenario one: travel time for persons with disability
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
             timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
             timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
             timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
             timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
             timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
             travelDistanceNMT = travelDistanceNMT * 1.5;
         }
     } else if (scenario == 2){
     //scenario two: travel time for persons with disability but cost zero to transit
         if (disability.name().equals("WITHOUT")){
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
             timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
             timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
             timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             transitFareEurosPerKm = 0.12;
         } else {
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
             timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
             timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
         }
     } else if (scenario == 3){
     //scenario three: same travel time with this paratransit service (as person without disability)
          transitFareEurosPerKm = 0.12;
          if (disability.name().equals("WITHOUT")){
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             timeAutoP = timeAutoD;
                      timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                      timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                      timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
          } else {
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
                      timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                      timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                      timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    } else if (scenario == 4){
    //scenario four: same travel time with this paratransit service (as person without disability) and free

           if (disability.name().equals("WITHOUT")){
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
              timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
              timeAutoP = timeAutoD;
              transitFareEurosPerKm = 0.12;
           } else {
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
              timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
              timeAutoP = timeAutoD;
              transitFareEurosPerKm = 0.0;
              travelDistanceNMT = travelDistanceNMT * 1.5;
           }
    }
    income = hh.getIncome();
    age = person.getAge();
    driversLicense = person.hasDriversLicense();
    hhAutos = hh.getAutos();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    } else if (income/12 > 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    }

    if(person.getId()< 30){
        System.out.println("Person " + person.getId() + " has gcBus of " + gcBus)
    }
    utilityAutoD        = interceptNHBW[0] + ageNHBW[0]*age + driversLicenseNHBW[0]*driversLicense +
                          hhAutosNHBW[0]*hhAutos + distToRailStopNHBW[0]*distToRailStop + generalizedCostNHBW[0]*gcAutoD;

    utilityAutoP        = interceptNHBW[1] + ageNHBW[1]*age + driversLicenseNHBW[1]*driversLicense +
                          hhAutosNHBW[1]*hhAutos + distToRailStopNHBW[1]*distToRailStop + generalizedCostNHBW[1]*gcAutoP;

    utilityBicycle      = interceptNHBW[2] + ageNHBW[2]*age + driversLicenseNHBW[2]*driversLicense +
                          hhAutosNHBW[2]*hhAutos + distToRailStopNHBW[2]*distToRailStop + tripLengthNHBW[2]*travelDistanceNMT;

    utilityBus          = interceptNHBW[3] + ageNHBW[3]*age + driversLicenseNHBW[3]*driversLicense +
                          hhAutosNHBW[3]*hhAutos + distToRailStopNHBW[3]*distToRailStop + generalizedCostNHBW[3]*gcBus;

    utilityTrain        = interceptNHBW[4] + ageNHBW[4]*age + driversLicenseNHBW[4]*driversLicense +
                          hhAutosNHBW[4]*hhAutos + distToRailStopNHBW[4]*distToRailStop + generalizedCostNHBW[4]*gcTrain;

    utilityTramMetro    = interceptNHBW[5] + ageNHBW[5]*age + driversLicenseNHBW[5]*driversLicense +
                          hhAutosNHBW[5]*hhAutos + distToRailStopNHBW[5]*distToRailStop + generalizedCostNHBW[5]*gcTramMetro;

    utilityWalk         = interceptNHBW[6] + ageNHBW[6]*age + driversLicenseNHBW[6]*driversLicense +
                          hhAutosNHBW[6]*hhAutos + distToRailStopNHBW[6]*distToRailStop + tripLengthNHBW[6]*travelDistanceNMT;

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
            expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
            expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
            expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

            if(expsumNestAuto > 0) {
                probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
                probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            }
            else {
                probabilityAutoD = 0.0;
                probabilityAutoP = 0.0;
            }
            if(expsumNestTransit > 0) {
                probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
                probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            }
            else {
                probabilityBus = 0.0;
                probabilityTrain = 0.0;
                probabilityTramMetro = 0.0;
            }
            probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
            probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;



    return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain, probabilityTramMetro, probabilityWalk], "double[]");

}

///////////////////////////////////////////////// NHBO Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for modes in the order: [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
// Beta coefficients for modes in the order: [AutoD, AutoP, Bicycle, Bus, Train, TramMetro, Walk]
interceptNHBO           = [0.0, 1.21, 0.93, 0.68, 0.64, 0.84, 2.99];
maleNHBO                = [0.0, -0.24, 0.0, -0.20, -0.23, -0.18, -0.073];
driversLicenseNHBO      = [0.0, -1.40, -1.49, -2.02, -1.74, -1.77, -1.44];
hhAutosNHBO             = [0.0, -0.029, -0.73, -0.80, -0.85, -0.86, -0.40];
distToRailStopNHBO      = [0.0, 0.0, 0.0, -0.40, -0.44, -0.48, 0.0];
agglomerationUrbanNHBO  = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
ruralNHBO               = [0.0, 0.0, 0.0, -0.70, -0.91, -1.12, 0.0];
generalizedCostNHBO_Sq  = [-0.000017, -0.000017, 0.0, -0.000017, -0.000017, -0.000017, 0.0];
tripLengthNHBO          = [0.0, 0.0, -0.15, 0.0, 0.0, 0.0, -0.57];

var calculateNHBOProbabilities = function(hh, person, originZone, destinationZone, travelTimes, travelDistanceAuto, travelDistanceNMT, peakHour){

    disability = person.getDisability();
    if (scenario == 1){
    //scenario one: travel time for persons with disability
        transitFareEurosPerKm = 0.12;
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 2){
    //scenario two: travel time for persons with disability but cost zero to transit
        if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            transitFareEurosPerKm = 0.12;
        } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
            timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "busDisability");
            timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "trainDisability");
            timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetroDisability");
            transitFareEurosPerKm = 0.0;
            travelDistanceNMT = travelDistanceNMT * 1.5;
        }
    } else if (scenario == 3){
    //scenario three: same travel time with this paratransit service (as person without disability)
         transitFareEurosPerKm = 0.12;
         if (disability.name().equals("WITHOUT")){
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
         } else {
            timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
            timeAutoP = timeAutoD;
                     timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                     timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                     timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
            travelDistanceNMT = travelDistanceNMT * 1.5;
         }
    } else if (scenario == 4){
    //scenario four: same travel time with this paratransit service (as person without disability)
          if (disability.name().equals("WITHOUT")){
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "car");
             transitFareEurosPerKm = 0.12;
             timeAutoP = timeAutoD;
          } else {
                    timeBus = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "bus");
                    timeTrain = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "train");
                    timeTramMetro = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "tramMetro");
             timeAutoD = travelTimes.getTravelTime(originZone, destinationZone, peakHour, "carDisability");
             timeAutoP = timeAutoD;
             transitFareEurosPerKm = 0.0;
             travelDistanceNMT = travelDistanceNMT * 1.5;
          }
    }
    income = hh.getIncome();
    gender = person.getMitoGender();
    driversLicense = person.hasDriversLicense();
    hhAutos = hh.getAutos();
    distToRailStop = originZone.getDistanceToNearestRailStop();
    areaType = originZone.getAreaTypeR();
    isMunichTrip = originZone.isMunichZone();

    if(income/12 <= 1500){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT1500_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT1500_other_transit
    } else if (income/12 > 1500 && income/12 <= 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT5600_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT5600_other_transit
    } else if (income/12 > 5600){
    gcAutoD = timeAutoD + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoD
    gcAutoP = timeAutoP + (travelDistanceAuto*fuelCostEurosPerKm)/VOT7000_other_autoP
    gcBus = timeBus + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTrain = timeTrain + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    gcTramMetro = timeTramMetro + (travelDistanceAuto*transitFareEurosPerKm)/VOT7000_other_transit
    }

    utilityAutoD        = interceptNHBO[0] + maleNHBO[0]*(gender.name().equals("MALE")) + driversLicenseNHBO[0]*driversLicense +
                          hhAutosNHBO[0]*hhAutos + distToRailStopNHBO[0]*distToRailStop +
                          agglomerationUrbanNHBO[0]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[0]*(areaType.name().equals("RURAL")) + generalizedCostNHBO_Sq[0]*Math.pow(gcAutoD,2);

    utilityAutoP        = interceptNHBO[1] + maleNHBO[1]*(gender.name().equals("MALE")) + driversLicenseNHBO[1]*driversLicense +
                          hhAutosNHBO[1]*hhAutos + distToRailStopNHBO[1]*distToRailStop +
                          agglomerationUrbanNHBO[1]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[1]*(areaType.name().equals("RURAL")) + generalizedCostNHBO_Sq[1]*Math.pow(gcAutoP,2);

    utilityBicycle      = interceptNHBO[2] + maleNHBO[2]*(gender.name().equals("MALE")) + driversLicenseNHBO[2]*driversLicense +
                          hhAutosNHBO[2]*hhAutos + distToRailStopNHBO[2]*distToRailStop +
                          agglomerationUrbanNHBO[2]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[2]*(areaType.name().equals("RURAL")) + tripLengthNHBO[2]*travelDistanceNMT;

    utilityBus          = interceptNHBO[3] + maleNHBO[3]*(gender.name().equals("MALE")) + driversLicenseNHBO[3]*driversLicense +
                          hhAutosNHBO[3]*hhAutos + distToRailStopNHBO[3]*distToRailStop +
                          agglomerationUrbanNHBO[3]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[3]*(areaType.name().equals("RURAL")) + generalizedCostNHBO_Sq[3]*Math.pow(gcBus,2);

    utilityTrain        = interceptNHBO[4] + maleNHBO[4]*(gender.name().equals("MALE")) + driversLicenseNHBO[4]*driversLicense +
                          hhAutosNHBO[4]*hhAutos + distToRailStopNHBO[4]*distToRailStop +
                          agglomerationUrbanNHBO[4]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[4]*(areaType.name().equals("RURAL")) + generalizedCostNHBO_Sq[4]*Math.pow(gcTrain,2);

    utilityTramMetro    = interceptNHBO[5] + maleNHBO[5]*(gender.name().equals("MALE")) + driversLicenseNHBO[5]*driversLicense +
                          hhAutosNHBO[5]*hhAutos + distToRailStopNHBO[5]*distToRailStop +
                          agglomerationUrbanNHBO[5]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[5]*(areaType.name().equals("RURAL")) + generalizedCostNHBO_Sq[5]*Math.pow(gcTramMetro,2);

    utilityWalk         = interceptNHBO[6] + maleNHBO[6]*(gender.name().equals("MALE")) + driversLicenseNHBO[6]*driversLicense +
                          hhAutosNHBO[6]*hhAutos + distToRailStopNHBO[6]*distToRailStop +
                          agglomerationUrbanNHBO[6]*(areaType.name().equals("AGGLOMERATION")+areaType.name().equals("URBAN")) +
                          ruralNHBO[6]*(areaType.name().equals("RURAL")) + tripLengthNHBO[6]*travelDistanceNMT;

     if (disability.name().equals("MENTAL")){
        utilityAutoD = Number.NEGATIVE_INFINITY;
        utilityBicycle = Number.NEGATIVE_INFINITY;
     } else if (disability.name().equals("PHYSICAL")){
        utilityBicycle = Number.NEGATIVE_INFINITY;
     }
        expsumNestAuto = Math.exp(utilityAutoD/nestingCoefficient) + Math.exp(utilityAutoP/nestingCoefficient);
        expsumNestTransit = Math.exp(utilityBus/nestingCoefficient) + Math.exp(utilityTrain/nestingCoefficient) + Math.exp(utilityTramMetro/nestingCoefficient);
        expsumTopLevel = Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) + Math.exp(utilityBicycle) + Math.exp(utilityWalk) + Math.exp(nestingCoefficient*Math.log(expsumNestTransit));

        if(expsumNestAuto > 0) {
            probabilityAutoD = ( Math.exp(utilityAutoD/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
            probabilityAutoP = ( Math.exp(utilityAutoP/nestingCoefficient) / expsumNestAuto) * (Math.exp(nestingCoefficient*Math.log(expsumNestAuto)) / expsumTopLevel);
        }
        else {
            probabilityAutoD = 0.0;
            probabilityAutoP = 0.0;
        }
        if(expsumNestTransit > 0) {
            probabilityBus = ( Math.exp(utilityBus/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            probabilityTrain = ( Math.exp(utilityTrain/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
            probabilityTramMetro = (Math.exp(utilityTramMetro/nestingCoefficient) / expsumNestTransit) * ( Math.exp(nestingCoefficient*Math.log(expsumNestTransit)) / expsumTopLevel);
        }
        else {
            probabilityBus = 0.0;
            probabilityTrain = 0.0;
            probabilityTramMetro = 0.0;
        }
        probabilityBicycle = Math.exp(utilityBicycle) / expsumTopLevel;
        probabilityWalk = Math.exp(utilityWalk) / expsumTopLevel;

    return Java.to([probabilityAutoD, probabilityAutoP, probabilityBicycle, probabilityBus, probabilityTrain, probabilityTramMetro, probabilityWalk], "double[]");
}
