travelDistanceParamHbs = -0.09;
impedanceParamHbs = 12.35;

travelDistanceParamHbo = -0.1;
impedanceParamHbo = 11.70;

travelDistanceParamHbw = -0.09;
impedanceParamHbw = 12.2;

travelDistanceParamHbe = -0.09;
impedanceParamHbe = 12.2;

travelDistanceParamNhbw = -0.09;
impedanceParamNhbw = 11.297;

travelDistanceParamNhbo = -0.09;
impedanceParamNhbo = 10.927;


var calculateHBW = function (travelDistance, totalEmployees) {
    impedance = impedanceParamHbw * Math.exp(travelDistanceParamHbw * travelDistance);
    attraction = 0;
    if(totalEmployees > 0) {
        attraction = Math.log(totalEmployees);
    }
    return Math.exp(impedance + attraction);
}

var calculateHBE = function (travelDistance, schoolEnrollment) {
    impedance = impedanceParamHbe * Math.exp(travelDistanceParamHbe * travelDistance);
    attraction = 0;
    if(schoolEnrollment > 0) {
        attraction = Math.log(schoolEnrollment);
    }
    return Math.exp(impedance + attraction);
}

var calculateHBS  = function (travelDistance, retailEmployees) {
    impedance = impedanceParamHbs * Math.exp(travelDistanceParamHbs * travelDistance);
    attraction = 0;
    if(retailEmployees > 0) {
        attraction = Math.log(retailEmployees);
    }
    return Math.exp(impedance + attraction);
}

var calculateHBO = function (travelDistance, households, adminEmployees, serviceEmployees) {
    impedance = impedanceParamHbo * Math.exp(travelDistanceParamHbo * travelDistance);
    attraction = 0;
    if(households > 0) {
        attraction += Math.log(households);
    }
    if(adminEmployees > 0) {
        attraction += Math.log(adminEmployees);
    }
    if(serviceEmployees > 0) {
        attraction += Math.log(serviceEmployees);
    }
    return Math.exp(impedance + attraction);
}

var calculateNHBW = function (travelDistance, households, adminEmployees, serviceEmployees, retailEmployees) {
    impedance = impedanceParamNhbw * Math.exp(travelDistanceParamNhbw * travelDistance);

    attraction = 0;
    if(households > 0) {
        attraction += Math.log(households);
    }
    if(retailEmployees > 0) {
        attraction += Math.log(retailEmployees);
    }
    if(serviceEmployees > 0) {
        attraction += Math.log(serviceEmployees);
    }
    if(adminEmployees > 0) {
        attraction += Math.log(adminEmployees);
    }
    return Math.exp(impedance + attraction);
}

var calculateNHBO = function (travelDistance, households, adminEmployees, serviceEmployees, retailEmployees) {
    impedance = impedanceParamNhbo * Math.exp(travelDistanceParamNhbo * travelDistance);

    attraction = 0;
    if(households > 0) {
        attraction += Math.log(households);
    }
    if(retailEmployees > 0) {
        attraction += Math.log(retailEmployees);
    }
    if(serviceEmployees > 0) {
        attraction += Math.log(serviceEmployees);
    }
    if(adminEmployees > 0) {
        attraction += Math.log(adminEmployees);
    }
    return Math.exp(impedance + attraction);
}

function log() {
    logVal = 0;
    logger.debug("\n_______________________________________________" +
    "\nCalculating Utility: base zone " + baseZone + " | target zone " + targetZone + " | purpose " + purpose +
    "\nUtility              = " + (logVal+= intercept) +
    "\n***" +
    "\nImpedance        = " + impedance +
    "\nUtility              = " + (logVal+= impedance) +
    "\n***" +
    "\nAttraction Impact    = " + attraction +
    "\nUtility              = " + (logVal+=attraction) +
    "\n_______________________________________________");
}
